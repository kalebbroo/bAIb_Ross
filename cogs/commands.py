import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Button, View, Select, Modal, TextInput
from config import SHOWCASE_ID
import requests
from typing import List
import asyncio
import time
import aiohttp
from payload import Payload


class Commands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self._last_member = None
        self.eta_task = None


    @app_commands.command(name="dream", description="Press ENTER to Generate an image")
    async def dream(self, interaction):
        #await interaction.followup.send(f"Generating Prompt Creator...", ephemeral=True)
        # Create the modal and open it
        modal = self.Txt2imgModal(self.bot)
        await interaction.response.send_modal(modal)


    async def update_eta(self, interaction):
        start_time = time.time()
        eta_message = None
        while True:
            eta = await get_eta()
            if eta > 0.0 or time.time() - start_time > 30:
                if eta_message:
                    await eta_message.edit(content=f"Estimated Generation Time: {int(eta)} seconds")
                else:
                    eta_message = await interaction.channel.send(f"Estimated Generation Time: {int(eta)} seconds")
            if eta <= 0.0 or time.time() - start_time > 30:
                break
            await asyncio.sleep(0.5)


    async def create_embed(self, interaction, prompt, negative, steps, seed, cfg_scale, width=512, height=512):
        user = interaction.user
        title = f"Generated by {user.name}"
        description = f"Prompt: {prompt}\nNegative: {negative}"
        footer_text = f"Steps: {steps}, Seed: {seed}, CFG Scale: {cfg_scale}, Width: {width}, Height: {height}"

        embed = discord.Embed(
            title=title,
            description=description,
            color=6301830
        )
        embed.set_image(url="attachment://temp.png")
        embed.set_footer(text=footer_text)
        embed.set_author(name=user.name, icon_url=user.avatar.url)

        return embed
    

    class Txt2imgModal(Modal):
        def __init__(self, bot):
            super().__init__(title="Enter Prompt and change settings")
            self.bot = bot
            self.eta_task = None

            model_list = self.bot.model_list
            # Add a TextInput for the prompt
            self.prompt = TextInput(label='Format must be [Prompt: Negative:]',
                                    style=discord.TextStyle.paragraph,
                                    default=f'[Main Focus]: a happy little tree [Background / Atmosphere]: foggy woods dusk [Style / Quality]: like artist Bob Ross, highest quality, 8k, DLSR photo [Negative]:nsfw',
                                    min_length=1,
                                    max_length=2000,
                                    required=True)
            self.model = TextInput(label='Choose 1 Model. Format must be 1. model_name',
                                            style=discord.TextStyle.paragraph,
                                            #placeholder=f'{model_list}',
                                            default=(model_list),
                                            min_length=1,
                                            max_length=2000,
                                            required=False)
            self.settings = TextInput(label='Enter values to change settings',
                                            style=discord.TextStyle.paragraph,
                                            placeholder='Change your settings here',
                                            default="[Steps]: 10, [Seed]: -1, [CFG Scale]: 7.0, [Width]: 512, [Height]: 512",
                                            min_length=1,
                                            max_length=2000,
                                            required=False)
            self.styles = TextInput(label='Choose Styles and VAE',
                                            style=discord.TextStyle.paragraph,
                                            placeholder='Choose Styles LORA VAE',
                                            default="pre filled out text",
                                            min_length=1,
                                            max_length=2000,
                                            required=False)
            # Add the TextInput components to the modal
            self.add_item(self.prompt)
            self.add_item(self.styles)
            self.add_item(self.model)
            self.add_item(self.settings)

        async def on_submit(self, interaction):
            await interaction.response.defer()

            prompt = self.prompt.value
            await interaction.followup.send(f"Creating image from prompt: {prompt}", ephemeral=True)

            styles = self.styles.value
            model = self.model.value
            settings = self.settings.value

            prompt, model, steps, seed, cfg_scale, batch_size = await self.bot.get_cog('ParseModal').parse_modal(interaction, prompt, styles, model, settings)

            # Create an instance of the Payload class
            payload_instance = Payload(self.bot)

            # Create the payload
            payload = await payload_instance.create_payload(prompt=prompt, model=model, steps=steps, seed=seed, cfg_scale=cfg_scale, batch_size=batch_size)
            negative_prompt = payload['prompt'].pop(-1)
            payload['prompt'] = ' '.join(payload['prompt'])
            payload['negative_prompt'] = negative_prompt
            interaction.client.payloads[str(interaction.user.id)] = payload

            # print(f"Payload before text2img {payload}")
            # payload['negative_prompt'] = "nsfw"
            # payload['prompt'] = "a happy little tree in the art style of Bob Ross"

            # Call the text2image function with the created payload
            response_data, payload = await self.bot.get_cog('Text2Image').txt2image(payload)
            print(f"Payload after text2img {payload}")
            # Start the ETA task
            self.eta_task = asyncio.ensure_future(self.bot.get_cog('Commands').update_eta(interaction))

            image_file = await self.bot.get_cog('Text2Image').pull_image(response_data)
            # Create an instance of the ImageView
            buttons = self.bot.get_cog('Buttons').ImageView(interaction, response_data['images'], payload)
            #self.bot.get_cog('Buttons').payload = payload

            # Create the embed
            embed = await self.bot.get_cog('Commands').create_embed(interaction, payload['prompt'], payload['negative_prompt'], 
                                                                    payload['steps'], payload['seed'], payload['cfg_scale'])
            await interaction.channel.send(embed=embed, file=image_file, view=buttons)

            # Store the payload in the Buttons cog
            self.bot.get_cog('Buttons').payload = payload

            print(f"{interaction.user.display_name} Dreampt of {prompt}")

            # Cancel the ETA task
            if self.eta_task and not self.eta_task.done():
                self.eta_task.cancel()
                self.eta_task = None



async def get_eta():
    url = "http://localhost:7860/sdapi/v1/progress"
    params = {"skip_current_image": "false"}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                eta = data["eta_relative"]
                return eta
            else:
                return None





async def setup(bot):
    await bot.add_cog(Commands(bot))
    
