import discord
from discord.ext import commands
from discord import app_commands
from baib_ross import showcase
from config import SHOWCASE_ID
import requests
from typing import List


async def model_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    # Make a GET request to the API to fetch the list of available models
    response = requests.get('http://localhost:7860/sdapi/v1/sd-models')

    # Check if the request was successful
    if response.status_code == 200:
        # Parse the JSON response
        models = response.json()

        # Extract the model names and create a list of choices
        return [
            app_commands.Choice(name=model['model_name'], value=model['model_name'])
            for model in models if current.lower() in model['model_name'].lower()
        ]
    else:
        return []




class Commands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self._last_member = None


    @commands.Cog.listener()
    async def on_ready(self):
        print("Bot is ready!")

    @commands.command()
    async def sync(self, ctx) -> None:
        fmt  = await ctx.bot.tree.sync(guild=ctx.guild)
        await ctx.send(f"synced {len(fmt)} commands")


        


    @app_commands.command(name="dream", description="Generate an image using the Stable Diffusion API")
    @app_commands.describe(prompt = "Enter the text prompt that you want the image to be generated from")
    @app_commands.describe(negative = "Enter any negative prompts to avoid certain elements in the image")
    @app_commands.autocomplete(model=model_autocomplete)
    @app_commands.describe(steps = "Specify the number of steps for the diffusion process")
    @app_commands.describe(seed = "Provide a seed for the random number generator to ensure reproducibility")
    @app_commands.describe(width = "Specify the width of the generated image")
    @app_commands.describe(height = "Specify the height of the generated image")
    @app_commands.describe(sampling_method = "Choose the sampling method for the diffusion process")
    @app_commands.describe(cfg_scale = "Specify the configuration scale for the model")
    @app_commands.describe(face_restoration = "Choose whether to apply face restoration to the generated image")
    @app_commands.describe(high_res_fix = "Choose whether to apply high resolution fix to the generated image")
    @app_commands.describe(denoising_strength = "Specify the strength of denoising to be applied to the generated image")
    async def dream(self, interaction: discord.Interaction, prompt: str = None, negative: str = None, model: str = None, steps: int = 10,
                    seed: int = -1, width: int = 512, height: int = 512, sampling_method: str = "Euler a", cfg_scale: int = 7,
                    face_restoration: bool = False, high_res_fix: bool = False, denoising_strength: float = 0.7):
        await interaction.response.defer()
        # Call the text2image function with the provided options
        payload = self.bot.get_cog('Text2Image').create_payload(prompt, negative, model, steps,
                    seed, width, height, sampling_method, cfg_scale, face_restoration, high_res_fix, denoising_strength)

        image_data = await self.bot.get_cog('Text2Image').txt2image(payload)
        image_file = await self.bot.get_cog('Text2Image').pull_image(image_data)
        #await interaction.channel.send(file=image_file)
        embed = await create_embed(interaction, prompt, negative, steps, seed, cfg_scale, width, height)

        await interaction.channel.send(embed=embed, file=image_file)

        # Save the image and post it to the showcase channel
        #await showcase(self.bot, image, {"steps": steps, "seed": seed, "model": model, "prompt": prompt, "negative": negative}, SHOWCASE_ID)



async def create_embed(interaction, prompt, negative, steps, seed, cfg_scale, width, height):
    user = interaction.user
    title = f"Generated by {user.name}"
    description = f"Prompt: {prompt}\nNegative: {negative}"
    footer_text = f"Steps: {steps}, Seed: {seed}, CFG Scale: {cfg_scale}, Width: {width}, Height: {height}"

    embed = discord.Embed(
        title=title,
        description=description,
        color=6301830
    )
    embed.set_image(url="attachment://temp.png")
    embed.set_footer(text=footer_text)
    embed.set_author(name=user.name, icon_url=user.avatar.url)

    return embed




async def setup(bot):
    await bot.add_cog(Commands(bot))
    